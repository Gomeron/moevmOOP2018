#ifndef OBJECT
#define OBJECT

#include <iostream>
#include <fstream>
#include <memory>
#include "iter"
#include "crown"

using namespace std;

class Crown;

//--------------------------------------OBJECT-------------------------------------------
class Object 
{
    int x_;
    int y_;
    int hp_;

    const int id_;
    int count_ob_;
    int cur_amount_;

    const shared_ptr<Crown> crown_;

public: 
        
    void print_ob();
    void print_ob_simple();
    char draw(); 
    
    void read_obj(fstream &f, int id);
    void damage(int damage);
    bool alive();
    int army();
    bool check_crown();

//fix
    int &getx();
    int &gety();
    int &gethp();
    int& getid();
    const int &getid() const;

    Object(shared_ptr<Crown> crown, int x, int y, int hp);
    Object(shared_ptr<Crown> crown, istream &in);      
    ~Object();

    friend istream &operator>>(istream &in, Object &ob);
    friend ostream &operator<<(ostream &out, Object &ob);
};
//-----------------------------------------------------------------------------------------


//---------------------------------OBJECT-METHODS------------------------------------------
void Object::print_ob() {
    cout << "Object:"<< endl 
         << "    x = " << x_ << endl
         << "    y = " << y_ << endl
         << "    hp = " << hp_ << endl
         << "    crown = " << crown_->getcolor() << endl
         << "    id = " << id_ << endl
         << "Object." <<endl; 
}

Object::Object(shared_ptr<Crown> crown, int x, int y, int hp): x_(x), y_(y), hp_(hp), id_(count_ob_++), crown_(crown) {
    print_ob(); 
}

Object::Object(shared_ptr<Crown> crown, istream &in): id_(count_ob_++), crown_(crown){ 
    in >> *this; 
    print_ob(); 
}

Object::~Object(){
    cout << "~Object:"<< endl 
            << "    x = " << x_ << endl
            << "    y = " << y_ << endl
            << "    hp = " << hp_ << endl
            << "    crown = " <<crown_->getcolor() << endl
            << "    id = " << id_ << endl
        << "~Object." <<endl;
    cur_amount_--;
}   

void Object::damage(int damage) { 
    hp_ -= damage; 
}

bool Object::alive(){
    return (hp_ > 0);
}

char Object::draw(){
    if(alive()) return 'o'; 
    else if(!alive()) return 'x';
} 

int Object::army(){
    if(crown_->getcolor() == "green") return 1;
    if(crown_->getcolor() == "red")return 0; // red    
}

void Object::print_ob_simple() { 
    cout << "[ " << id_ << " " << x_ << " " << y_ << " "<< hp_ << " ]" << endl; 
}

int &Object::getx()
    {return x_;}

int &Object::gety()
    {return y_;}

int &Object::gethp()
    {return hp_;} 

const int &Object::getid() const
    {return id_;}   
       
//-----------------------------------------------------------------------------------------

istream &operator>>(istream &in, Object &ob){
    in >> ob.x_ >> ob.y_ >> ob.hp_; 
    return in;
}

ostream &operator<<(ostream &out, Object &ob){
    if(ob.crown_->getcolor() ==  "green" ) // 1
        out << "\033[32m";
    if(ob.crown_->getcolor() == "red") // 0
        out << "\033[31m";
    out << ob.draw() << "\033[0m";
    return out;
}   

//-----------------------------------------------------------------------------------------
#endif //OBJECT
