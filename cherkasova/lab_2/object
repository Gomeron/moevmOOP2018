#ifndef OBJECT
#define OBJECT

#include <iostream>
#include <fstream>
#include "iter"

using namespace std;

class Field;

//--------------------------------------OBJECT-------------------------------------------
class Object {

    int x_;
    int y_;
    int hp_;
    int id_;

public: 
    int getx(){return x_;}
    int gety(){return y_;}
    int gethp(){return hp_;} 
    int getid(){return id_; }           
    void print_ob() {cout << "Object:\n    x = " << x_ << "\n    y = " << y_ << "\n    hp = " << hp_ 
                            << "\n    " << "id = " << id_ << "\nObject." <<endl; }
    void print_ob_simple() { cout << "[ " << x_ << " " << y_ << " "<< hp_ << " " << id_ << " ]" << endl; }
    
    
    void read_obj(fstream &f, int iobj);
    void damage(int d);
    bool is_obj(int i, int j,  char **m);

    Object(int x, int y, int hp, int id) { x_ = x; y_ = y; hp_ = hp;  id_ = id;  print_ob(); }
    Object(fstream &f, int iobj) { read_obj(f, iobj); print_ob(); }

// destructor ~Elem (see file list)
    // ~Object() { cout <<"~"; print_ob(); } 
};
//-----------------------------------------------------------------------------------------


//---------------------------------OBJECT-METHODS------------------------------------------
void Object::damage(int d) { hp_ = hp_ - d; }

bool Object::is_obj(int i, int j, char **m)
{
    if (m[j][i] == 'o') return true;    
    return false;
}

void Object::read_obj(fstream &f, int iobj)
{
    f >> x_ >> y_ >> hp_;
    id_ = iobj;  
    // cout << "check obj from file: " << _x <<" "<<y<<" "<<hp<<endl;  
}

//-----------------------------------------------------------------------------------------


#endif //OBJECT
